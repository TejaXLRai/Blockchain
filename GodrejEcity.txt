pragma solidity ^0.7.0;

contract godrejEcityProject {
    
    
    
	// Declare state variables in this section
	
	uint public totalRegistered = 0;
    struct Township {
    uint256 id;
    string propertyID;
    address mainPropertyOwnerAddress;
    string owner_name;
    string property_address;
    string property_zip;
    string owner_father_name;
    string owner_mother_name;
  }
	uint8 private decimals;                             
	uint256 constant public MAX_UINT256 = 2**256 - 1; 
	uint256 public totalSupply;
	
	address public godrejEcity = msg.sender;    	           
	address public mainPropertyOwner;                   

	address[] public stakeholders;                      

	mapping (address => mapping (address => uint256)) private allowed;   
	mapping (address => uint256) public sharesOffered;
    mapping (address => uint256) public shareSellPrice;
    mapping (string => Township) public PropertyOwners;
    mapping(address => uint256) public balanceOf;

    // Define events
	event ShareTransfer(address indexed from, address indexed to, uint256 balanceOf);
	event Seizure(address indexed seizedfrom, address indexed to, uint256 balanceOf);
	event NewStakeHolder(address StakeholderAdded);
	event StakeHolderBanned (address banned);
	event SharesOffered(address Seller, uint256 AmmountShares, uint256 PricePerShare);
	event SharesSold(address Seller, address Buyer, uint256 SharesSold,uint256 PricePerShare);
  
  
    constructor(uint initialSupply) public {
        
        balanceOf[msg.sender] = initialSupply;
		totalSupply = 100;
		decimals = 0;
		mainPropertyOwner = msg.sender;
		stakeholders.push(godrejEcity); 
		stakeholders.push(mainPropertyOwner);
		allowed[mainPropertyOwner][godrejEcity] = MAX_UINT256;      
	    require(msg.sender == godrejEcity,  "wrong contract");

    }
  


	modifier onlygodrejEcity{
	  require(msg.sender == godrejEcity);
	  _;
	}
	modifier onlyPropOwner{
	    require(msg.sender == mainPropertyOwner);
	    _;
	}
	



function registerTownShip(
    string memory propertyId,
    address mainPropertyOwnerAddress,
    string memory owner_name,
    string memory property_address,
    string memory property_zip,
    string memory owner_father_name,
    string memory owner_mother_name
    ) public payable  {
    require(godrejEcity == msg.sender, "Only GodrejEctity can Register Property"); 
    
    
    totalRegistered++;
       PropertyOwners[propertyId] = Township(
      totalRegistered,
      propertyId,
      mainPropertyOwnerAddress,
      owner_name,
      property_address,
      property_zip,
      owner_father_name,
      owner_mother_name
    );
        
    }
    
     function getOwnerAddress(string memory propertyId) public view returns(address) {
        
        return (PropertyOwners[propertyId].mainPropertyOwnerAddress);
    
  }

	function showTokensOf(address _owner) public view returns (uint256 balance) {       
		return balanceOf[_owner];
	}

	 function isStakeholder(address _address) public view returns(bool, uint256) {    
	    for (uint256 s = 0; s < stakeholders.length; s += 1){
	        if (_address == stakeholders[s]) return (true, s);
	    }
	    return (false, 0);
	 }

    function addStakeholder(address _stakeholder) public onlygodrejEcity {     
		(bool _isStakeholder,) = isStakeholder(_stakeholder);
		if (!_isStakeholder) stakeholders.push(_stakeholder);
		allowed[_stakeholder][godrejEcity] = MAX_UINT256;                      
		emit NewStakeHolder (_stakeholder);
    }

	function banStakeholder(address _stakeholder) public onlygodrejEcity {         
	    (bool _isStakeholder, uint256 s) = isStakeholder(_stakeholder);
	    if (_isStakeholder){
	        stakeholders[s] = stakeholders[stakeholders.length - 1];
	        stakeholders.pop();
	        seizureFrom (_stakeholder, godrejEcity,balanceOf[_stakeholder]);   
	        emit StakeHolderBanned(_stakeholder);
	    }
	}


	function seizureFrom(address _from, address _to, uint256 _value) internal returns (bool success) {           
		uint256 allowance = allowed[_from][msg.sender];
		require(balanceOf[_from] >= _value && allowance >= _value);
		balanceOf[_to] += _value;
		balanceOf[_from] -= _value;
		if (allowance < MAX_UINT256) {
			allowed[_from][msg.sender] -= _value;
		}
		emit Seizure(_from, _to, _value);
		return true;
	}


	

//Stakeholder functions

    function offerTokens(uint256 _sharesOffered, uint256 _shareSellPrice) public{       
        (bool _isStakeholder, ) = isStakeholder(msg.sender);
        require(_isStakeholder);
        require(_sharesOffered <= balanceOf[msg.sender]);
        sharesOffered[msg.sender] = _sharesOffered;
        shareSellPrice[msg.sender] = _shareSellPrice;
        emit SharesOffered(msg.sender, _sharesOffered, _shareSellPrice);
    }
    
    
    
     function buyTokens (uint256 _sharesToBuy, address payable _from) public payable{    
       // (bool _isStakeholder, ) = isStakeholder(msg.sender);
       // require(_isStakeholder);
        require(godrejEcity != msg.sender, "wrong contract state");
        require(msg.value == _sharesToBuy * shareSellPrice[_from] && _sharesToBuy <= sharesOffered[_from] && _sharesToBuy <= balanceOf[_from] &&_from != msg.sender); 
        allowed[_from][msg.sender] = _sharesToBuy;
        seizureFrom(_from, msg.sender, _sharesToBuy);
        sharesOffered[_from] -= _sharesToBuy;
        _from.transfer(msg.value);
        emit SharesSold(_from, msg.sender, _sharesToBuy,shareSellPrice[_from]);
    }
    
    function payTax (uint256 _sharesToTax, uint256 _taxRatePerShare, address payable _to) public payable{    
        (bool _isStakeholder, ) = isStakeholder(msg.sender);
        require(_isStakeholder);
        require(godrejEcity != msg.sender, "wrong contract state");
        require(msg.value == _sharesToTax * _taxRatePerShare);
        _to.transfer(msg.value);
    }
    
    
    function transfer(address _recipient, uint256 _shares) public returns (bool) {      
        (bool isStakeholderX, ) = isStakeholder(_recipient);
	    require(isStakeholderX);
	    require(balanceOf[msg.sender] >= _shares);
	    balanceOf[msg.sender] -= _shares;
	    balanceOf[_recipient] += _shares;
	    emit ShareTransfer(msg.sender, _recipient, _shares);
	    return true;
	 }
	 
	 
	
	
	function claimOwnership () public {           
		require(balanceOf[msg.sender] > (totalSupply /2) && msg.sender != mainPropertyOwner,"Error. You do not own more than 50% of the property tokens or you are the main owner allready");
		mainPropertyOwner = msg.sender;

	}

//falback
    receive () external payable {                   
        (msg.sender).transfer(msg.value);
        }
}